#!/usr/bin/env node
const figlet = require("figlet")
const Printer = require('@darkobits/lolcatjs')
const txt = figlet.textSync("S K D") + "\n" + "孙匡东脚手架"
const result = Printer.fromString(txt)
const pro = require("commander")
const inquirer = require('inquirer');
const json2ts = require("json2ts");
// 获取用户的全路径
// const userHome = require("user-home");
const shell = require("shelljs");
// 下载git
const downLoad = require("download-git-repo");
const tempalteUrl = "direct:https://github.com/qiuJinLong/yd-vue-kernel.git"

pro.version(result, "-v,--version")
pro.option("-i,--init", "项目初始化")
pro.option("-s,--surround", "配置前端开发环境")
const bindHandler = {
    init: function () {
        inquirer.prompt([
            {
                type: "text",
                message: "请输入用户文件夹的名称",
                name: "dirname"
            },
            {
                type: "list",
                name: "js",
                massage: "请选择语言",
                choices: ["ES6", "TypeScript"]
            }
        ]).then(answers => {
            // 文件夹名称
            const _dirname = answers.dirname
            // 获取路径
            const _pwd = shell.pwd().stdout
            const _projectPath = `${_pwd}/${_dirname}`
            // 进入用户目录中
            shell.cd(_pwd)
            // 删除之前的文件
            shell.rm("-rf", _projectPath)
            // 创建新的文件
            shell.mkdir(_dirname)
            // 项目下载到 _projectPath
            downLoad(tempalteUrl, _projectPath, {clone: true}, err => {
                if (err) {
                    console.log(chalk.red("yd-cli 启动异常"), err)
                } else {
                    // 变量过滤
                    shell.sed("-i", "yd-vue-kernel", _dirname, _projectPath + "/package.json")
                }
            })
        })
    },
    json2ts(jsonUrl) {
        // 帮助我们生成接口文档
        const jsonContent = {
            code: 1,
            info: {
                message: "请求成功",
                data: [{
                    num: 1,
                    title: "3号仓库"
                }]
            }
        }
        const result = json2ts.convert(JSON.stringify(jsonContent));
        spinner.stop()
    },
    surround() {
        inquirer.prompt([
            {
                type: "list",
                name: "brew",
                massage: "是否安装 brew",
                choices: ["Yes", "No"]
            },
            {
                type: "list",
                name: "nrm",
                massage: "是否安装 nrm",
                choices: ["Yes", "No"]
            },
            {
                type: "list",
                name: "node-version",
                massage: "安装 node 版本控制工具",
                choices: ["n", "nvm"]
            },
            {
                type: "list",
                name: "git",
                massage: "是否安装 git",
                choices: ["Yes", "No"]
            },
            {
                type: "list",
                name: "iTerm2",
                massage: "是否安装 iTerm2",
                choices: ["Yes", "No"]
            },
            {
                type: "list",
                name: "zsh",
                massage: "是否安装 zsh",
                choices: ["Yes", "No"]
            }
        ]).then(answers => {
            console.log("answers.node-version", answers)
            if(answers.brew === "Yes") {
                // shell 执行安装命令
                shell.exec('/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"')
                shell.exec('brew cleanup -n')
            }
            if(answers.nrm === "Yes") {
                // shell 执行安装命令
                shell.exec('brew install nrm')
            }
            if(answers.node-version) {
                // shell 执行安装命令
                shell.exec(`brew install ${answers["node-version"]}`)
            }
            if(answers.git === 'Yes'){
                shell.exec(`brew install git`)
            }
            if(answers.iTerm2 === 'Yes'){
                shell.exec(`brew install iTerm2`)
            }
            if(answers.zsh === 'Yes'){
                shell.exec('sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"')
            }
        })
    }
}
// 前面是值，后面是参数
pro.usage("<cmd> [env]")
    .arguments("<cmd> [env]")
    .action(function (cmd, otherParams) {
        const handler = bindHandler[cmd]
        if (handler) {
            handler(otherParams)
        } else {
            console.log(cmd + " have not, please run: sun --help")
        }
    });

pro.parse(process.argv)